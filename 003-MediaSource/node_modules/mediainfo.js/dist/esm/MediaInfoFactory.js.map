{"version":3,"file":"MediaInfoFactory.js","names":["MediaInfo","DEFAULT_OPTIONS","mediaInfoModuleFactory","noopPrint","defaultLocateFile","path","prefix","url","URL","pathname","MediaInfoFactory","options","callback","errCallback","undefined","Promise","resolve","reject","locateFile","mergedOptions","format","mediaInfoModuleFactoryOpts","print","printErr","onAbort","err","then","wasmModule","catch"],"sourceRoot":"../../src","sources":["MediaInfoFactory.ts"],"sourcesContent":["import MediaInfo, { DEFAULT_OPTIONS, type FormatType } from './MediaInfo'\nimport mediaInfoModuleFactory, { type MediaInfoModule } from './MediaInfoModule'\n\ninterface MediaInfoFactoryOptions<TFormat extends FormatType> {\n  /** Output cover data as base64 */\n  coverData?: boolean\n\n  /** Chunk size used by `analyzeData` (in bytes) */\n  chunkSize?: number\n\n  /** Result format */\n  format?: TFormat\n\n  /** Full information display (all internal tags) */\n  full?: boolean\n\n  /** Customize loading path for files */\n  locateFile?(this: void, url: string, scriptDirectory: string): string\n}\n\nconst noopPrint = () => {\n  // No-op\n}\n\ntype FactoryCallback<TFormat extends FormatType> = (mediainfo: MediaInfo<TFormat>) => void\ntype ErrorCallback = (error: unknown) => void\n\n/**\n * This method will be called to look up the path for the `MediaInfoModule.wasm`\n * file. It handles the special case of loading from a CDN that serves\n * mediainfo.js from the root (e.g. `https://unpkg.com/mediainfo.js`).\n *\n * @see https://emscripten.org/docs/api_reference/module.html#Module.locateFile\n *\n * @param path File name\n * @param prefix Filepath prefix\n * @returns Full path to file\n */\nfunction defaultLocateFile(path: string, prefix: string) {\n  try {\n    const url = new URL(prefix)\n    if (url.pathname === '/') {\n      return `${prefix}mediainfo.js/dist/${path}`\n    }\n  } catch {}\n  return `${prefix}../${path}`\n}\n\n/**\n * Factory function for {@link MediaInfo}.\n *\n * @param options User options\n * @returns MediaInfo object\n */\nfunction MediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options?: MediaInfoFactoryOptions<TFormat>\n): Promise<MediaInfo<TFormat>>\n\n/**\n * Factory function for {@link MediaInfoFactory}.\n *\n * @param options User options\n * @param callback Function that is called once the module is created\n */\nfunction MediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options: MediaInfoFactoryOptions<TFormat>,\n  callback: FactoryCallback<TFormat>\n): void\n\n/**\n * Factory function for {@link MediaInfoFactory}.\n *\n * @param options User options\n * @param callback Function that is called once the module is created\n * @param callback Error callback\n */\nfunction MediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options: MediaInfoFactoryOptions<TFormat>,\n  callback: FactoryCallback<TFormat>,\n  errCallback: ErrorCallback\n): void\n\n// TODO pass through all emscripten module options\nfunction MediaInfoFactory<TFormat extends FormatType = typeof DEFAULT_OPTIONS.format>(\n  options: MediaInfoFactoryOptions<TFormat> = {},\n  callback?: FactoryCallback<TFormat>,\n  errCallback?: ErrorCallback\n): Promise<MediaInfo<TFormat>> | void {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => MediaInfoFactory(options, resolve, reject))\n  }\n\n  const { locateFile, ...mergedOptions } = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    format: (options.format ?? DEFAULT_OPTIONS.format) as TFormat,\n  }\n\n  const mediaInfoModuleFactoryOpts: Partial<MediaInfoModule> = {\n    // Silence all print in module\n    print: noopPrint,\n    printErr: noopPrint,\n\n    locateFile: locateFile ? locateFile : defaultLocateFile,\n    onAbort: (err: Error) => {\n      if (errCallback) {\n        errCallback(err)\n      }\n    },\n  }\n\n  // Fetch and load WASM module\n  mediaInfoModuleFactory(mediaInfoModuleFactoryOpts)\n    .then((wasmModule) => callback(new MediaInfo<TFormat>(wasmModule, mergedOptions)))\n    .catch((err) => {\n      if (errCallback) errCallback(err)\n    })\n}\n\nexport type { MediaInfoFactoryOptions }\nexport default MediaInfoFactory\n"],"mappings":"OAAOA,SAAS,IAAIC,eAAe;AAAA,OAC5BC,sBAAsB;AAmB7B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB;AAAA,CACD;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,IAAY,EAAEC,MAAc,EAAE;EACvD,IAAI;IACF,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACF,MAAM,CAAC;IAC3B,IAAIC,GAAG,CAACE,QAAQ,KAAK,GAAG,EAAE;MACxB,OAAQ,GAAEH,MAAO,qBAAoBD,IAAK,EAAC;IAC7C;EACF,CAAC,CAAC,MAAM,CAAC;EACT,OAAQ,GAAEC,MAAO,MAAKD,IAAK,EAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA,SAASK,gBAAgBA,CACvBC,OAAyC,GAAG,CAAC,CAAC,EAC9CC,QAAmC,EACnCC,WAA2B,EACS;EACpC,IAAID,QAAQ,KAAKE,SAAS,EAAE;IAC1B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAKP,gBAAgB,CAACC,OAAO,EAAEK,OAAO,EAAEC,MAAM,CAAC,CAAC;EACrF;EAEA,MAAM;IAAEC,UAAU;IAAE,GAAGC;EAAc,CAAC,GAAG;IACvC,GAAGlB,eAAe;IAClB,GAAGU,OAAO;IACVS,MAAM,EAAGT,OAAO,CAACS,MAAM,IAAInB,eAAe,CAACmB;EAC7C,CAAC;EAED,MAAMC,0BAAoD,GAAG;IAC3D;IACAC,KAAK,EAAEnB,SAAS;IAChBoB,QAAQ,EAAEpB,SAAS;IAEnBe,UAAU,EAAEA,UAAU,GAAGA,UAAU,GAAGd,iBAAiB;IACvDoB,OAAO,EAAGC,GAAU,IAAK;MACvB,IAAIZ,WAAW,EAAE;QACfA,WAAW,CAACY,GAAG,CAAC;MAClB;IACF;EACF,CAAC;;EAED;EACAvB,sBAAsB,CAACmB,0BAA0B,CAAC,CAC/CK,IAAI,CAAEC,UAAU,IAAKf,QAAQ,CAAC,IAAIZ,SAAS,CAAU2B,UAAU,EAAER,aAAa,CAAC,CAAC,CAAC,CACjFS,KAAK,CAAEH,GAAG,IAAK;IACd,IAAIZ,WAAW,EAAEA,WAAW,CAACY,GAAG,CAAC;EACnC,CAAC,CAAC;AACN;AAGA,eAAef,gBAAgB"}